# -*- coding: utf-8 -*-
"""CAE Hackathon Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WXTPGB_RjBrNzGZk5a_Hd_jJ0K-WFs1w

# Step1 Import Package & Mount GoogleDrive
"""

# !pip install openai pillow

import os
from openai import OpenAI
import base64
import re
from PIL import Image
import requests
import io
import pandas as pd
import time

from google.colab import drive

drive.mount("/content/drive")

"""# Step2 Image Detection Prepare"""


# @title Function to encode the image and set OpenAI key
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")


api_key = "APIKEY"
client = OpenAI(api_key=api_key)

"""### Get the route of Evaluation Dataset Images"""

# # For Evaluation
# dir = "/content/drive/Shareddrives/Project_SeminarFall2023 (Prof. Lipen Wang)/Evaluation Dataset Images"

# For Description
dir = "/content/drive/MyDrive/Photo"
file_name = os.listdir(dir)

route = []
for i in file_name:
    i = dir + "/" + i
    route.append(i)
route.sort()
print(route)

len(route)

route = [route[56], route[59], route[76]]
route

"""### Get the Evaluation Submission Excel File"""

# # For Evaluation
# df = pd.read_excel("/content/drive/MyDrive/Eyes on the Water - Hackathon Model Evaluation submission template.xlsx", index_col = 0)

# For Description
df = pd.read_excel(
    "/content/drive/Shareddrives/Project_SeminarFall2023 (Prof. Lipen Wang)/Development_Dataset/Development_Dataset.xlsx",
    index_col=0,
)
df

"""### Define the Function to Extract the Answer List"""


def str_ans(result):
    match = re.search(r"\[([^\[\]]+)\]", result)

    if match:
        extracted_response = match.group(1)
        extracted_list = extracted_response.split(",")
        extracted_list = [item.strip() for item in extracted_list]
        print("Extracted list:", extracted_list)

    else:
        print("No matching pattern found.")
    return extracted_list


"""# Step3 Prompt and Get Answer for the First 7 Questions"""

df = df.iloc[:, :7]
df

ans = []
k = 0

prompt = ""
# system_content = "The GPT is designed for automated analysis of urban river images, examining seven specific features: 1) Presence of an outfall, which may or may not be a pipe. 2) Flow from the outfall. 3) Aeration caused by the outfall. 4) Screen on the outfall. 5) Presence of sewage 'rags'. 6) General rubbish. 7) Obstruction to river flow. When details are unclear, it infers the most plausible answer using all available data. It provides structured, concise responses, formatted as [Y,N,N,Y,N,Y,Partial], directly corresponding to the analysis of these elements. Specifically, question 7 classified as Full, Partial, Minor, or None. The GPT's approach is professional, accurate, and structured."
system_content = """The GPT is designed for automated analysis of urban river images, examining seven specific features: The first four questions are chain questions, their answer must be identical.
(1) The presence of an outfall. Usually a pipe, but not always.
(2) Is there flow coming out of the outfall?
(3) Is there aeration caused by outfall?
(4) Is there a screen on the outfall?
(5) Presence of sewage 'rags'. For indicating possible sewage pollution.
(6) General rubbish. Cannot count fallen leaves and algae.
(7) An obstruction to river flow. Full = 100% obstruction across channel, Partial >= 25%, Minor <25%, None = 0%.
Specifically, question 7 classified as Full, Partial, Minor, or None. Other questions are classified as Y or N or U, corresponding to Yes, No, and Unknown respectively.
When details are unclear, it infers the most plausible answer using all available data.
It provides structured, concise responses, formatted as [N,N,N,U,N,Y,Partial]. Make sure the response is only in such format without any other description.
And if there exists ambiguities with one specific answer, simply response U instead.
The GPT's approach is professional, accurate, and structured."""

for i in route:
    # Path to your image
    image_path = i
    try:
        # Getting the base64 string
        base64_image = encode_image(image_path)
        response = client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                {"role": "system", "content": system_content},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high",
                            },
                        },
                    ],
                },
            ],
            max_tokens=300,
        )
    except:
        print("unsupported image")

    try:
        final_ans = str_ans(response.choices[0].message.content)
        if os.path.basename(i)[:-4] == df.index[k]:
            df.loc[df.index[k]] = final_ans
    except:
        print("No answer")

    print("---", os.path.basename(i), "---")
    print(response.choices[0].message.content)
    print()

    # ans.append(response.choices[0].message.content)
    k += 1
    time.sleep(5)

df

df.to_csv("/content/drive/MyDrive/Result.csv")

"""# Step4 Prompt and Get Answer for the Next 7 Questions"""

df = df.iloc[:, 7:14]
df

ans = []
k = 0

prompt = ""
# system_content = "The GPT is tailored for analyzing urban river images, focusing on: 1) if the river channel is man-made or modified, 2) the extent of channel modification (Full, Partial, Minor, None), 3) the presence of water discoloration, 4) the color of the discoloration, 5) if the discoloration is due to an outfall, 6) the presence of visible aeration, and 7) the extent of aeration (Full, Partial, Minor, None). It provides structured, concise responses, formatted as [Y,Partial,N,None,N,Y,Partial]. Specifically, questions 3, 4, and 5 are interrelated: if question 3's answer is 'N' (no discoloration), the responses to questions 4 and 5 will automatically be 'None' and 'N', respectively. The GPT avoids speculation, infers answers from visible information, and communicates formally and accurately."
system_content = """The GPT is tailored for analyzing urban river images, focusing on:
(1) if the river channel is man-made or modified
(2) the extent of channel modification. Full = 100% change to walls and base of channel, Partial >= 25%, Minor <25%, None = 0%.
(3) the presence of water discoloration. Could also indicate high turbidity.
(4) the color of the discoloration
(5) Is the discolouration caused by an outfall
(6) Is there visible aeration in the river reach (e.g. bubbles, turbulence, rapids, weirsâ€¦)
(7) the extent of aeration. Full = 100% of visible flow aerated (white water), Partial >= 25%, Minor <25%, None = 0%.
Specifically, question 2 and 7 classified as Full, Partial, Minor, or None. Other questions are classified as Y or N or U, corresponding to Yes, No, and Unknown respectively.
It provides structured, concise responses, formatted as [Y,Partial,N,None,U,Y,Partial]. Make sure the response is only in such format without any other description.
Specifically, questions 3, 4 are interrelated: if question 3's answer is 'N' (no discoloration), the responses to questions 4 will automatically be 'None'.
The GPT avoids speculation, infers answers from visible information, and communicates formally and accurately."""

for i in route:
    # Path to your image
    image_path = i
    try:
        # Getting the base64 string
        base64_image = encode_image(image_path)
        response = client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                {"role": "system", "content": system_content},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high",
                            },
                        },
                    ],
                },
            ],
            max_tokens=300,
        )
    except:
        print("unsupported image")

    try:
        final_ans = str_ans(response.choices[0].message.content)
        if os.path.basename(i)[:-4] == df.index[k]:
            df.loc[df.index[k]] = final_ans
    except:
        print("No answer")

    print("---", os.path.basename(i), "---")
    print(response.choices[0].message.content)
    print()

    # ans.append(response.choices[0].message.content)
    k += 1
    time.sleep(5)

df

df.to_csv("/content/drive/MyDrive/Result_2.csv")

"""# Step5 Prompt and Get Answer for the Last 8 Questions"""

df = df.iloc[:, 14:]
df


def str_ans(result):
    match = re.search(r"\[([^\[\]]+)\]", result)

    if match:
        extracted_response = match.group(1)
        extracted_list = extracted_response.split(",")
        extracted_list = [item.strip() for item in extracted_list]
        print("Extracted list:", extracted_list)

        element_to_move = extracted_list.pop(6)
        extracted_list.insert(1, element_to_move)
        print("Modified Extracted list:", extracted_list)

    else:
        print("No matching pattern found.")

    return extracted_list


ans = []
k = 0

prompt = ""
# system_content = "The GPT is tailored for analyzing urban river images, focusing on: 1) if the river channel is man-made or modified, 2) the extent of channel modification (Full, Partial, Minor, None), 3) the presence of water discoloration, 4) the color of the discoloration, 5) if the discoloration is due to an outfall, 6) the presence of visible aeration, and 7) the extent of aeration (Full, Partial, Minor, None). It provides structured, concise responses, formatted as [Y,Partial,N,None,N,Y,Partial]. Specifically, questions 3, 4, and 5 are interrelated: if question 3's answer is 'N' (no discoloration), the responses to questions 4 and 5 will automatically be 'None' and 'N', respectively. The GPT avoids speculation, infers answers from visible information, and communicates formally and accurately."
system_content = """The GPT is designed for automated analysis of urban river images, examining the presence of 8 specific features:
(1) Presence of flow gauges, levels, or quality sensors. Any sort of flow or water quality measurement device detected in the photo
(2) Are fish species present
(3) Are algal blooms present
(4) Are invertebrate species present
(5) Are birds present
(6) Are other forms of wildlife present
(7) Is there wildlife present
(8) Are plant species present
When details are unclear, it infers the most plausible answer using all available data. It provides structured, concise responses, formatted as [N,Y,N,N,Y,N,N,N], in the order of which 'Y' stands for â€˜Yesâ€™ and 'N' stands for â€˜Noâ€™. Make sure the response is only in such format without any other description.
Question (2 - 7) are interrelated about the presence of wildlife. If any answer (2 to 6) is 'Y', Answer of (7) must be 'Y'.
The GPT's approach is professional, accurate, and structured."""

for i in route:
    # Path to your image
    image_path = i
    try:
        # Getting the base64 string
        base64_image = encode_image(image_path)
        response = client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                {"role": "system", "content": system_content},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high",
                            },
                        },
                    ],
                },
            ],
            max_tokens=300,
        )
    except:
        print("unsupported image")

    try:
        final_ans = str_ans(response.choices[0].message.content)
        if os.path.basename(i)[:-4] == df.index[k]:
            df.loc[df.index[k]] = final_ans
    except:
        print("No answer")

    print("---", os.path.basename(i), "---")
    print(response.choices[0].message.content)
    print()

    # ans.append(response.choices[0].message.content)
    k += 1
    time.sleep(5)

df

df.to_csv("/content/drive/MyDrive/Result_3.csv")

"""# ----------------------------------------------------------------------------------------------------------------------

# Photo Description for Development_Dataset
"""

df = df.iloc[:, :1]
df.insert(0, "Description", [None] * 175)
df = df.iloc[:, :1]
df

ans = []
k = 0

prompt = "No more than 100 words"
system_content = """The GPT specializes in analyzing urban river photographs, focusing on environmental indicators. It identifies and describes elements like outfall, sewage litter, discoloration, obstructions, channel modifications, aeration, sensors, and wildlife in no more than 100 words. The GPT provides objective, factual observations from the photograph without speculative interpretations. The responses are concise, informative, and suitable for both environmental professionals and enthusiasts. The GPT will ask for clarifications if the photo's details are ambiguous, ensuring accurate and succinct analyses. The tone remains informative, catering to a varied audience interested in environmental observations of urban rivers."""

for i in route:
    # Path to your image
    image_path = i
    try:
        # Getting the base64 string
        base64_image = encode_image(image_path)
        response = client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                {"role": "system", "content": system_content},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high",
                            },
                        },
                    ],
                },
            ],
            max_tokens=200,
        )
    except:
        print("unsupported image")

    try:
        # final_ans = str_ans(response.choices[0].message.content)
        if os.path.basename(i)[:-4] == df.index[k]:
            df.loc[df.index[k]] = response.choices[0].message.content
    except:
        print("No answer")

    print("---", os.path.basename(i), "---")
    print(response.choices[0].message.content)
    print()

    # ans.append(response.choices[0].message.content)
    k += 1
    time.sleep(5)

df

df.to_csv("/content/drive/MyDrive/Description.csv")

"""# Automated Photo Description for App"""

# !pip install openai pillow

from openai import OpenAI
import base64


# @title Function to encode the image and set OpenAI key
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")


api_key = "APIKEY"
client = OpenAI(api_key=api_key)

prompt = "No more than 100 words"
system_content = """The GPT specializes in analyzing urban river photographs, focusing on environmental indicators. It identifies and describes elements like outfall, sewage litter, discoloration, obstructions, channel modifications, aeration, sensors, and wildlife in no more than 100 words. The GPT provides objective, factual observations from the photograph without speculative interpretations. The responses are concise, informative, and suitable for both environmental professionals and enthusiasts. The GPT will ask for clarifications if the photo's details are ambiguous, ensuring accurate and succinct analyses. The tone remains informative, catering to a varied audience interested in environmental observations of urban rivers."""

# !!!Please insert the image path here
image_path = "/content/drive/MyDrive/Photo/GBR201600000000001.JPG"

# Getting the base64 string
base64_image = encode_image(image_path)

response = client.chat.completions.create(
    model="gpt-4-vision-preview",
    messages=[
        {"role": "system", "content": system_content},
        {
            "role": "user",
            "content": [
                {"type": "text", "text": prompt},
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{base64_image}",
                        "detail": "high",
                    },
                },
            ],
        },
    ],
    max_tokens=200,
)

# Here is the result
Description = response.choices[0].message.content
print(Description)
